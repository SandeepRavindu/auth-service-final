# ===============================
# SPRING APPLICATION
# ===============================
spring.application.name=auth-service
server.port=${SERVER_PORT:8081}
client.url=${CLIENT_URL:http://localhost:5173}


# ===============================
# DATABASE CONFIGURATION (Neon)
# ===============================
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=${DB_DRIVER:org.postgresql.Driver}

# JPA / Hibernate
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:update}
spring.jpa.database-platform=${DB_DIALECT:org.hibernate.dialect.PostgreSQLDialect}
spring.jpa.show-sql=${JPA_SHOW_SQL:true}
spring.jpa.open-in-view=false


# ===============================
# JWT CONFIGURATION
# ===============================
jwt.secret.key=${JWT_SECRET_KEY:yoursecretkeyhereforjwttokengenerationandvalidation}


# ===============================
# MAIL CONFIGURATION
# ===============================
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.protocol=smtp
spring.mail.properties.mail.smtp.from=${MAIL_FROM:${MAIL_USERNAME}}


# ===============================
# KAFKA CONFIGURATION (Aiven)
# ===============================
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS}

spring.kafka.properties.security.protocol=${KAFKA_SECURITY_PROTOCOL:SASL_SSL}
spring.kafka.properties.sasl.mechanism=${KAFKA_SASL_MECHANISM:PLAIN}
spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
  username="${KAFKA_USERNAME}" \
  password="${KAFKA_PASSWORD}";

spring.kafka.properties.ssl.truststore.location=classpath:${KAFKA_TRUSTSTORE_LOCATION}
spring.kafka.properties.ssl.truststore.type=${KAFKA_TRUSTSTORE_TYPE:PEM}

# Producer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.template.default-topic=${KAFKA_DEFAULT_TOPIC:email_default_topic}

# Consumer
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP:notification-group}
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*


# ===============================
# CLOUDINARY CONFIGURATION
# ===============================
cloudinary.cloud.name=${CLOUDINARY_CLOUD_NAME}
cloudinary.api.key=${CLOUDINARY_API_KEY}
cloudinary.api.secret=${CLOUDINARY_API_SECRET}


# ===============================
# OAUTH2 CONFIGURATION
# ===============================
# GitHub
spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET}
spring.security.oauth2.client.registration.github.scope=read:user,user:email

# Google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email


# ===============================
# EUREKA (Optional)
# ===============================
# eureka.client.service-url.defaultZone=${EUREKA_URL:http://localhost:8761/eureka}
